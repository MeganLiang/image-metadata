#-------------------------------------------------------------------------------
# Name:        module2
#
# Purpose:
# Author:      Megan
# Sources:      http://www.daniweb.com/software-development/python/threads/391736/how-to-add-a-drop-down-menu-and-return-the-selected-option
#
# Created:     16/07/2014
# Copyright:   (c) Megan 2014
# Licence:     <your licence>
#-------------------------------------------------------------------------------
#!/usr/bin/env python

def main():
    pass

if __name__ == '__main__':
    main()
def main():
    pass

if __name__ == '__main__':
    main()
#import GUI library
from tkinter import *

#for Python V3 you must explicitely load the messagebox
import tkinter.messagebox

#create the Image class incorporating instance variables and methods
class Image:
    def __init__(self, image_id, file_and_ext, title, owner, licence):
        self.image_id = image_id
        self.file_and_ext = file_and_ext
        self.title = title
        self.owner = owner
        self.licence = licence

    def get_id(self):
        return self.image_id

    def get_file_and_ext(self):
        return self.file_and_ext

    def get_title(self):
        return self.title

    def get_owner(self):
        return self.owner

    def get_licence(self):
        return self.licence




#create the GUI interface
class GUI:
    #init should return None, only self
    def __init__(self):

        window = Tk()
        window.title("Data Entry for Schools")
        #setting root window and size
        window.minsize(width=600, height=400)

        #INITIALIZATION VARIABLES
        #this variable stores whether the data has been validated or not
        self.ready_to_write = False
        self.recordlist = []
        self.licence_init = ""

        #creating label and field variables in GUI
        image_id_label = Label(window, text='Enter image ID:')
        image_id_label.pack() #.pack() places the component in the window
        self.image_id_field = Entry(window)
        self.image_id_field.pack()

        file_ext_label = Label(window, text='Enter filename and extension:', fg = "blue", bg = "cornsilk")
        file_ext_label.pack()
        self.file_ext_field = Entry(window)
        self.file_ext_field.pack()

        title_label = Label(window, text='Enter title:')
        title_label.pack()
        self.title_field = Entry(window)
        self.title_field.pack()

        owner_label = Label(window, text='Enter owner:')
        owner_label.pack()
        self.owner_field = Entry(window)
        self.owner_field.pack()

        self.licence = StringVar()
        self.licence_init = "Select licence type"
        self.licence.set(self.licence_init)
        choices = ["Attribution alone","Attribution + NoDerivatives","Attribution + ShareAlike", "Attribution + Noncommercial", "Attribution + Noncommercial + NoDerivatives", "Attribution + Noncommercial + ShareAlike"]
        #OptionMenu() only allows one variable to be chosen as opposed to MenuButton(),  it is also much clearer and straightforward (seen in V1)
        OptionMenu(window, self.licence, *choices).pack()

        #creates a button. The command function is run when the button is pressed
        validate_label = Label(window, text='Press to validate:')
        validate_button = Button(window, text='Submit', command=self.doSubmit)

        csv_label = Label(window, text='Convert Record to csv')
        csv_button = Button(window, text='write to csv', command=self.writetocsv)

        validate_label.pack()
        validate_button.pack()

        csv_label.pack()
        csv_button.pack()

        #waiting for user input - event driven program
        window.mainloop()

    def doSubmit(self):

        if len(self.image_id_field.get()) <1 or len(self.file_ext_field.get()) <1 or len(self.title_field.get()) <1 or len(self.owner_field.get()) <1 or self.licence.get() == "Select licence type":
            tkinter.messagebox.showwarning('Warning!','Please enter a value for all fields')
        else:
            try:
                validated_integer = int(self.image_id_field.get())
                self.recordlist.append(Image(self.image_id_field.get(), self.file_ext_field.get(), self.title_field.get(), self.owner_field.get(), self.licence.get()))
                self.ready_to_write= True
                tkinter.messagebox.showinfo('Notice','Submission Successful')

                self.image_id_field.delete(0, END) #command to clear field
                self.file_ext_field.delete(0, END)
                self.title_field.delete(0, END)
                self.owner_field.delete(0, END)
                self.licence.set(self.licence_init)

            except:
                tkinter.messagebox.showwarning('Warning!','Please enter numeric data for image ID')
                print('Please enter numeric data for image ID')

    def writetocsv(self):
        #this is the callback method for the 'write to csv' button
        import csv
        file_name = 'database.txt'
        imageID_list = []

        if self.ready_to_write: #cheacks data has been previously validated
            ofile = open(file_name, 'a') #open with write('w') or append('a') privelages
            writer = csv.writer(ofile, delimiter=',')
            #cycles through list of records created by gui
            for record in self.recordlist:
                writer.writerow([record.get_id(),record.get_file_and_ext(), record.get_title(), record.get_owner(), record.get_licence()])
            #explicitly closes the output file
            ofile.close()
        else:
            tkinter.messagebox.showwarning('Error!', 'You need to Validate your data')

        self.ready_to_write= False
        tkinter.messagebox.showinfo('Notice',file_name+' File Generated Successfully')

#initialises the programme
GUI()
